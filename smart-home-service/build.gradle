plugins {
    id 'org.springframework.boot' version '2.5.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.asciidoctor.convert' version '1.5.8'
    id 'org.hidetake.swagger.generator' version '2.18.2'
    id 'com.bmuschko.docker-spring-boot-application' version '7.0.1'
    id "org.sonarqube" version "3.0"
    id 'jacoco'
    id 'java'
}

group = 'de.nicolasschlecker'
version = '0.0.2'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
    set('testcontainersVersion', "1.15.3")
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    implementation group: 'io.freefair.okhttp-spring-boot', name: 'okhttp3-spring-boot-starter', version: '2.4.5.1'

    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    compileOnly 'org.projectlombok:lombok:1.18.18'

    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

    implementation 'org.springdoc:springdoc-openapi-ui:1.5.9'

    runtimeOnly 'org.postgresql:postgresql'

    testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.6'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'com.h2database:h2'
}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "vv2"
        property "sonar.host.url", "http://localhost:9000/"
        property "sonar.login", "8c80357972a1a2f264d13eca5b2eafbcb9c6cb2c"
    }
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled true
        csv.enabled true
        csv.destination layout.buildDirectory.dir('jacocoCsv').get().asFile
        html.destination layout.buildDirectory.dir('jacocoHtml').get().asFile
    }
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

docker {
    springBootApplication {
        baseImage = 'inf-docker.fh-rosenheim.de/studwinten4338/docker-images/adoptopenjdk:11-jre-hotspot'
        ports = [8080]
        images = ["${project.name}:${project.version}", "${project.name}:latest"]
        jvmArgs = ['-Dspring.profiles.active=production', '-Xmx2048m']
    }
}

dockerBuildImage.dependsOn(assemble)
